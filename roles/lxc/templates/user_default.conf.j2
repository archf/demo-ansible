#
# {{ ansible_managed }}
#

# See man lxc.container.conf

# The network virtualization acts at layer two.
# Several virtual interfaces can be assigned and used in a container even
# if the system has only one physical network interface.
#
# Each time a lxc.network.type field is found a new round of network
# configuration begins.
# For each container:
#  -  Several network virtualization types can be specified
#  -  several network interfaces can be assigned
#
# The different virtualization types are:

# none: will cause the container to share the host's network namespace.
#   - the host network's devices are usable in the container.

# empty: will create only the loopback interface.

# veth:
# A virtual ethernet pair device is created with one side assigned to
# the container and the other side attached the bridge specified by the
# lxc.network.link option.
# If the bridge is not specified, then the veth pair device will be created
# but not attached to any bridge.
# By default, lxc chooses a name for the network device belonging to the
# outside of the container
# If you wish to handle this name yourselves, you can tell lxc
# to set a specific name with the lxc.network.veth.pair option (except for
# unprivileged containers where this option is ignored for security reasons).

# vlan:
# A vlan interface is linked with the interface specified by the
# lxc.network.link and assigned to the container. The vlan identifier is
# specified with the option lxc.network.vlan.id.
#
# macvlan: a macvlan interface is linked with the interface specified by the
# lxc.network.link and assigned to the container. lxc.network.macvlan.mode
# specifies the mode the macvlan will use to communicate between  different
# macvlan on the same upper device. The accepted modes are private, the
# device never communicates with any other device on the same upper_dev
# (default), vepa, the new Virtual Ethernet Port Aggregator (VEPA) mode, it
# assumes that the adjacent bridge returns all frames where both source and
# destination are local to the macvlan port, i.e. the bridge is set up as a
# reflective relay. Broadcast frames coming in from the upper_dev get
# flooded to all macvlan interfaces in VEPA mode, local frames are not
# delivered locally, or bridge, it provides the behavior of a simple bridge
# between different macvlan interfaces on the same port. Frames from one
# interface to another one get delivered directly and are not sent out
# externally. Broadcast frames get flooded to all other bridge ports and to
# the external interface, but when they come back from a reflective relay, we
# don't deliver them again. Since we know all the MAC addresses, the macvlan
# bridge mode does not require learning or STP like the bridge module does.
#
# phys: an already existing interface specified by the lxc.network.link is
# assigned to the container.

# network virtualization type
lxc.network.type = {{ lxc_network_type }}

# specify the interface to be used for real network traffic
lxc.network.link = {{ lxc_network_link }}

# specify an action to do for the network, up: activates the interface.
lxc.network.flags = {{ lxc_network_flags }}

# the interface mac address is dynamically allocated by default to the virtual
# interface, but in some cases, this is needed to resolve a mac address
# conflict or to always have the same link-local ipv6 address. Any "x"
# in address will be replaced by random value, this allows setting
# hwaddr templates.
lxc.network.hwaddr = {{ lxc_network_hwaddr }}

# values should match those found in /etc/subuid and /etc/subgid
# those below are expected for the first user on a standard Ubuntu system
{# fixme: detect and generate those 2 strings #}
lxc.id_map = u 0 100000 65536
lxc.id_map = g 0 100000 65536
